@using presentation.Services;
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <style type="text/css">
        .editor {
            width: 100%;
            height: 40em;
        }
    </style>
    <title> @ViewBag.Title CppSeminar </title>
</head>
<body>
    <header class="container">
        <div class="row text-light bg-secondary">
            <div class="col-sm m-5">
                <h1 class="display-3">APC</h1>
                <p class="lead">Aplikačné programovanie v C++</p>
            </div>
            <div class="col-sm my-5 ml-auto pr-5">
                <img class="d-block ml-auto my-auto mr-3" width="100" src="https://raw.githubusercontent.com/Benio101/cpp-logo/13ff598ea91d20d0604cd3ddbfcf6bd947e2149e/cpp_logo.svg" />
            </div>
        </div>
        <div class="row bg-light">
            <nav class="navbar navbar-default navbar-light w-100">
                <div class="navbar-header">
                    <ul class="nav">
                        <li class="nav-item"><th:a asp-page="/Index" class="nav-link">Home</th:a></li>
                        <li class="nav-item"><th:a asp-page="/Tasks/Index" class="nav-link">Tasks</th:a></li>
                        <li class="nav-item"><th:a asp-page="/Submissions/Index" class="nav-link">Your Submissions</th:a></li>
                        <li class="nav-item"><th:a asp-page="/Connection/Index" class="nav-link">Connection</th:a></li>
                        @if (User.IsAdmin())
                        {
                            <li class="nav-item"><th:a asp-page="/Admin/Users/Index" class="nav-link">Users</th:a></li>
                            <li class="nav-item"><th:a asp-page="/Admin/TestCase/Index" class="nav-link">Test cases</th:a></li>
                            <li class="nav-item"><th:a asp-page="/Admin/Submissions/List" class="nav-link">All Submissions</th:a></li>
                        }
                    </ul>
                </div>
                <div class="ml-auto">
                    <th:partial name="_UserPanel.cshtml" />
                </div>
            </nav>
        </div>
    </header>
    <div class="container p-3">
        @RenderBody()
    </div>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@2.4.0/dist/purify.min.js" integrity="sha256-A/Bhn6U7642jcUJxdcb00N9bOwuKNXKjv6oWAxgpW2Y=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@4.1.0/marked.min.js" integrity="sha256-hrr3XpKvqYgFyeFbyZTFvPYmu5rkjcIjAP6IU7tM/4Q=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js" integrity="sha384-DfXdz2htPH0lsSSs5nCTpuj/zy4C+OGpamoFVy38MVBnE+IbbVYUew+OrCXaRkfj" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.6.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-Fy6S3B9q64WdZWQUiU+q4/2Lc9npb8tCaSX9FK7E8HnRr0Jz8D6OP9dO5Vg3Q9ct" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/json2html/2.2.2/json2html.min.js" integrity="sha512-LYBxdtbgyLlB9aFozpSH9IpPpP+7t+tRoBG7VhLJ2APxcstLkyMI78qCaLwoIEQwKzbdS0VdK9o3ps4q6NT1cQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.11.0/ace.min.js" integrity="sha512-6pDHCWoec69aZTg0ERg6luKv9ITHrRgy4w0WqVCgii2FoQevTDvibuCWDrTEm7W4HH0Dq9xhyZ3qw33rrnUMQw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.11.0/theme-monokai.min.js" integrity="sha512-vH1p51CJtqdqWMpL32h5B9600achcN1XeTfd31hEcrCcCb5PCljIu7NQppgdNtdsayRQTnKmyf94s6HYiGQ9BA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.11.0/mode-c_cpp.min.js" integrity="sha512-yrjaGZSXaUR0K7QsfA61DTlPtXoZpkIMN87076mYNbFfPD3FQtcuKiQqwPgj/ldy5Rk31Kh4+Omrc0SNzIHttg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        function resolveTeachersJson(elemId) {
            const templates = {
                parent: {
                    '<>': 'div', html: [
                        { '<>': 'h1', text: 'Results' },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Compilation' },
                                { '<>': 'ul', html: obj => $.json2html(obj.compilation, templates.compilation) }
                            ]
                        },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Tests' },
                                { '<>': 'ul', html: obj => $.json2html(obj.tests, templates.tests) }
                            ]
                        }
                    ]
                },
                compilation: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${binary}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.configurations, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result.errno === 0 ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result.errno === 0 ? 'text-success' : 'text-danger' },
                                        {
                                            '<>': 'div', obj: obj => obj.result, html: [
                                                { '<>': 'div', text: 'errno: ${errno}' },
                                                { '<>': 'div', text: 'output_path: ${output_path}' },
                                                { '<>': 'pre', text: '${compiler_output}' }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                tests: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${configuration}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.cases, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result.status === 'Success' ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result.status === 'Success' ? 'text-success' : 'text-danger' },
                                        {
                                            '<>': 'div', obj: obj => obj.result, html: [
                                                { '<>': 'div', text: 'status: ${status}' },
                                                { '<>': 'div', text: 'returncode: ${returncode}' },
                                                { '<>': 'pre', text: 'stdout: ${stdout}' },
                                                { '<>': 'pre', text: 'stderr: ${stderr}' }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }

            let json = ''
            let selector = '#' + elemId

            try {
                json = $(selector).text()
                if (!json)
                    return
                $(selector).json2html(JSON.parse(json), templates.parent, { method: 'replace' })
            }
            catch (e) {
                console.log(e)
                const err = $('<span class="text-danger"></span>').text('Cannot parse result json, that is pretty bad.')
                const details = $('<small class="d-block text-muted"></small>').text(json)
                $(selector).replaceWith(err, details)
            }
        }

        function resolveStudentsJson(elemId) {
            const templates = {
                parent: {
                    '<>': 'div', html: [
                        { '<>': 'h1', text: 'Results' },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Compilation' },
                                { '<>': 'ul', html: obj => $.json2html(obj.compilation, templates.compilation) }
                            ]
                        },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Tests' },
                                { '<>': 'ul', html: obj => $.json2html(obj.tests, templates.tests) }
                            ]
                        }
                    ]
                },
                compilation: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${binary}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.configurations, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result ? 0x274C : 0x2714) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result ? 'text-danger' : 'text-success' },
                                        { '<>': 'pre', class: obj => obj.result ? 'd-block' : 'd-none', 'text': '${result}' },
                                    ]
                                }
                            ]
                        }
                    ]
                },
                tests: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${configuration}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.cases, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.status ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.status ? 'text-success' : 'text-danger' },
                                        { '<>': 'pre', class: obj => obj.result ? 'd-block' : 'd-none', 'text': '${result}' },
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }

            let json = ''
            let selector = '#' + elemId

            try {
                json = $(selector).text()
                if (!json)
                    return
                $(selector).json2html(JSON.parse(json), templates.parent, { method: 'replace' })
            }
            catch (e) {
                console.log(e)
                const err = $('<span class="text-danger"></span>').text('Cannot parse results. Please contact your teachers with test id')
                const details = $('<small class="d-block text-muted"></small>').text(json)
                $(selector).replaceWith(err, details)
            }
        }

        resolveStudentsJson('results-students')
        resolveTeachersJson('results-teachers')

        $('.markdown').each(function(){
            const doc = new DOMParser().parseFromString(this.innerHTML.trim(), 'text/html')
            const text = doc.documentElement.textContent

            this.innerHTML = DOMPurify.sanitize(marked.parse(text))
        })

        $('.editor').each(function () {
            const editor = ace.edit(this)
            editor.setTheme('ace/theme/monokai')
            editor.session.setMode('ace/mode/c_cpp')
            editor.setReadOnly(true)
        })
    </script>
    @RenderSection("JavaScript", required: false)
</body>
</html>
