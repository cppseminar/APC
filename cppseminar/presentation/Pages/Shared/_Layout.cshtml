@using presentation.Services;
<!DOCTYPE html>

<html>
<head>
    <meta name="viewport" content="width=device-width" />
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/highlightjs@9.16.2/styles/atelier-dune-light.css" integrity="sha256-41Yqdj3xNHeqkkwcdlovbTRmTeuvYCaOwLhEcBcb7QY=" crossorigin="anonymous">
    <style type="text/css">
        .editor {
            width: 100%;
            height: 40em;
        }
    </style>
    <title> @ViewBag.Title CppSeminar </title>
</head>
<body>
    <header class="container">
        <div class="row text-light bg-secondary">
            <div class="col-sm m-5">
                <h1 class="display-3">APC</h1>
                <p class="lead">Aplikačné programovanie v C++</p>
            </div>
            <div class="col-sm my-5 ml-auto pr-5">
                <img class="d-block ml-auto my-auto mr-3" width="100" src="https://raw.githubusercontent.com/Benio101/cpp-logo/13ff598ea91d20d0604cd3ddbfcf6bd947e2149e/cpp_logo.svg" />
            </div>
        </div>
        <div class="row bg-light">
            <nav class="navbar navbar-default navbar-light w-100">
                <div class="navbar-header">
                    <ul class="nav">
                        <li class="nav-item"><th:a asp-page="/Index" class="nav-link">Home</th:a></li>
                        <li class="nav-item"><th:a asp-page="/Tasks/Index" class="nav-link">Tasks</th:a></li>
                        <li class="nav-item"><th:a asp-page="/Submissions/Index" class="nav-link">Your Submissions</th:a></li>
                        @if (User.IsAdmin())
                        {
                            <li class="nav-item"><th:a asp-page="/Admin/Users/Index" class="nav-link">Users</th:a></li>
                            <li class="nav-item"><th:a asp-page="/Admin/TestCase/Index" class="nav-link">Test cases</th:a></li>
                            <li class="nav-item"><th:a asp-page="/Admin/Submissions/List" class="nav-link">All Submissions</th:a></li>
                        }
                    </ul>
                </div>
                <div class="ml-auto">
                    <th:partial name="_UserPanel.cshtml" />
                </div>
            </nav>
        </div>
    </header>
    <div class="container p-3">
        @RenderBody()
    </div>
    <script src="https://cdn.jsdelivr.net/npm/dompurify@3.0.8/dist/purify.min.js" integrity="sha256-0kaYYq3qitkkVZpP/6uKTJwfTpqFNM6OHDbsaYzw9Uw=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked@12.0.0/marked.min.js" integrity="sha256-6x9rGYgLyApf40xqYYhRc7YO3aRVunozyYcU2xfTn5k=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/marked-highlight@2.1.1/lib/index.umd.js" integrity="sha256-yoTwjo/7nKghlUliA1G8DE3EHReX5IS2pmcg2mDC9+k=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/highlightjs@9.16.2/highlight.pack.min.js" integrity="sha256-yeMmUlHbk3Q2fuSCxKTJOAcO+KSYnzaHv/phSqz4NLo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/jquery@3.7.1/dist/jquery.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.min.js" integrity="sha256-YMa+wAM6QkVyz999odX7lPRxkoYAan8suedu4k2Zur8=" crossorigin="anonymous"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/json2html/2.2.3/json2html.min.js" integrity="sha512-zhWwASt1FySoQCUbnZQune6UVg2EXMLDJtyDPGybmJH/kZ3cuAorXZyiV2pHCl9AZRQLGLRV9Z0/3LzEP463XA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.6/ace.min.js" integrity="sha512-kiECX53fzPhY5cnGzxTUZUOefsjR7gY3SD2OOgcsxZ0nAMZ3e+lkqxhXzGAFm05KjIaQ49/OyNryGTcbLb2V9w==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.6/theme-monokai.js" integrity="sha512-Sdw8bUflcjHyNw2HABuSBSjs7tFUhcra6MMT5n5GUQrol2j6vUSRjnrn8MQZmKSL+aL2KKTE5aziFNUPFdsX9g==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/ace/1.32.6/mode-c_cpp.min.js" integrity="sha512-caUbWe+l7h52Yfiut+hnk+W8LT4v3OlrvqVK7AUE7HKhMcFI86cmrD0cshe98P1UpfpsK30mQDzRhkzYwZHzQA==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script>
        hljs.initHighlightingOnLoad();

        const {markedHighlight} = globalThis.markedHighlight;

        const markedhl = new marked.Marked(
            markedHighlight({
                    langPrefix: 'hljs language-',
                    highlight: (code, lang, info) => hljs.highlightAuto(code, [lang, 'plaintext']).value,
                })
            )

        function resolveTeachersJson(elemId) {
            const templates = {
                parent: {
                    '<>': 'div', html: [
                        { '<>': 'h1', text: 'Results' },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Compilation' },
                                { '<>': 'ul', html: obj => $.json2html(obj.compilation, templates.compilation) }
                            ]
                        },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Tests' },
                                { '<>': 'ul', html: obj => $.json2html(obj.tests, templates.tests) }
                            ]
                        }
                    ]
                },
                compilation: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${binary}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.configurations, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result.errno === 0 ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result.errno === 0 ? 'text-success' : 'text-danger' },
                                        {
                                            '<>': 'div', obj: obj => obj.result, html: [
                                                { '<>': 'div', text: 'errno: ${errno}' },
                                                { '<>': 'div', text: 'output_path: ${output_path}' },
                                                { '<>': 'pre', text: '${compiler_output}' }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                tests: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${configuration}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.cases, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result.status === 'Success' ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result.status === 'Success' ? 'text-success' : 'text-danger' },
                                        {
                                            '<>': 'div', obj: obj => obj.result, html: [
                                                { '<>': 'div', text: 'status: ${status}' },
                                                { '<>': 'div', text: 'returncode: ${returncode}' },
                                                { '<>': 'pre', text: 'stdout: ${stdout}' },
                                                { '<>': 'pre', text: 'stderr: ${stderr}' }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }

            let json = ''
            let selector = '#' + elemId

            try {
                json = $(selector).text()
                if (!json)
                    return
                $(selector).json2html(JSON.parse(json), templates.parent, { method: 'replace' })
            }
            catch (e) {
                console.log(e)
                const err = $('<span class="text-danger"></span>').text('Cannot parse result json, that is pretty bad.')
                const details = $('<small class="d-block text-muted"></small>').text(json)
                $(selector).replaceWith(err, details)
            }
        }

        function resolveStudentsJson(elemId) {
            const templates = {
                parent: {
                    '<>': 'div', html: [
                        { '<>': 'h1', text: 'Results' },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Compilation' },
                                { '<>': 'ul', html: obj => $.json2html(obj.compilation, templates.compilation) }
                            ]
                        },
                        {
                            '<>': 'div', html: [
                                { '<>': 'h2', text: 'Tests' },
                                { '<>': 'ul', html: obj => $.json2html(obj.tests, templates.tests) }
                            ]
                        }
                    ]
                },
                compilation: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${binary}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.configurations, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result.errno === 0 ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result.errno === 0 ? 'text-success' : 'text-danger' },
                                        {
                                            '<>': 'div', obj: obj => obj.result, html: [
                                                { '<>': 'pre', text: '${compiler_output}' }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                },
                tests: {
                    '<>': 'li', html: [
                        { '<>': 'h3', text: '${configuration}' },
                        {
                            '<>': 'ul', html: [
                                {
                                    '<>': 'li', obj: obj => obj.cases, 'html': [
                                        { '<>': 'span', text: obj => String.fromCharCode(obj.result.status === 'Success' ? 0x2714 : 0x274C) },
                                        { '<>': 'span', text: '${name}', class: obj => obj.result.status === 'Success' ? 'text-success' : 'text-danger' },
                                        {
                                            '<>': 'div', obj: obj => obj.result, html: [
                                                { '<>': 'div', class: obj => obj.returncode ? 'd-block' : 'd-none', text: 'returncode: ${returncode}' },
                                                { '<>': 'pre', class: obj => obj.stdout ? 'd-block' : 'd-none', text: '${stdout}' }
                                            ]
                                        }
                                    ]
                                }
                            ]
                        }
                    ]
                }
            }

            let json = ''
            let selector = '#' + elemId

            try {
                json = $(selector).text()
                if (!json)
                    return
                $(selector).json2html(JSON.parse(json), templates.parent, { method: 'replace' })
            }
            catch (e) {
                console.log(e)
                const err = $('<span class="text-danger"></span>').text('Cannot parse results. Please contact your teachers with test id')
                const details = $('<small class="d-block text-muted"></small>').text(json)
                $(selector).replaceWith(err, details)
            }
        }

        resolveStudentsJson('results-students')
        resolveTeachersJson('results-teachers')

        $('.markdown').each(function(){
            const doc = new DOMParser().parseFromString(this.innerHTML.trim(), 'text/html')
            const text = doc.documentElement.textContent

            this.innerHTML = DOMPurify.sanitize(markedhl.parse(text))
        })

        $('.editor').each(function () {
            const editor = ace.edit(this)
            editor.setTheme('ace/theme/monokai')
            editor.session.setMode('ace/mode/c_cpp')
            editor.setReadOnly(true)
        })
    </script>
</body>
</html>
