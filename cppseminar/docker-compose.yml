# This is used for dev purposes only
services:
    submissions.local:
        build:
            context: ./submissions
            target: dev
        volumes:
            - ./submissions/Controllers:/src/Controllers
            - ./submissions/Data:/src/Data
            - ./submissions/Models:/src/Models
            - ./submissions/Services:/src/Services
            - ./submissions/Startup.cs:/src/Startup.cs
        ports:
            - 8081:5004
        networks:
            - sharednet
        environment:
            DOTNET_USE_POLLING_FILE_WATCHER: 1
            DOTNET_WATCH_SUPPRESS_MSBUILD_INCREMENTALISM: 1
            DOTNET_WATCH_SUPPRESS_LAUNCH_BROWSER: 1
            DOTNET_WATCH_SUPPRESS_BROWSER_REFRESH: 1
        restart: "always"

    presentation.local:
        build:
            context: ./presentation
            target: dev
        volumes:
            - ./presentation/Startup.cs:/src/Startup.cs
            - ./presentation/Model:/src/Model
            - ./presentation/Pages:/src/Pages
            - ./presentation/Services:/src/Services
        networks:
            - sharednet
        ports:
            - 8080:8080
        environment:
            DOTNET_USE_POLLING_FILE_WATCHER: 1
            DOTNET_WATCH_SUPPRESS_MSBUILD_INCREMENTALISM: 1
            DOTNET_WATCH_SUPPRESS_LAUNCH_BROWSER: 1
            DOTNET_WATCH_SUPPRESS_BROWSER_REFRESH: 1
            ASPNETCORE_ENVIRONMENT: Development
            SUBMISSION_SERVICE: http://submissions.local:5004/
            TEST_SERVICE: http://testservice.local/
            USER_SERVICE: http://userservice.local/
        restart: "always"

    userservice.local:
        build:
            context: ./userservice
            target: dev
        networks:
            - sharednet
        volumes:
            - ./userservice/Startup.cs:/src/Startup.cs
            - ./userservice/Controllers:/src/Controllers
            - ./userservice/Models:/src/Models
            - ./userservice/Services:/src/Services
        ports:
            - 8082:80
        restart: always

    testservice.local:
        build:
            context: ./testservice
            target: dev
        networks:
            - sharednet
        volumes:
            - ./testservice/Startup.cs:/src/Startup.cs
            - ./testservice/Controllers:/src/Controllers
            - ./testservice/Models:/src/Models
            - ./testservice/Services:/src/Services
        ports:
            - 8083:80
        restart: always

    azurite.local:
        image: mcr.microsoft.com/azure-storage/azurite:3.14.0
        volumes:
            - azurite_data:/data
        ports:
            - 10000:10000
        command:
            - azurite-blob
            - "--blobHost"
            - 0.0.0.0
        networks:
            - sharednet
        environment:
            AZURITE_ACCOUNTS: azuriteuser:UGFzc3dvcmQxMjMhfg==
# Connection string:
# DefaultEndpointsProtocol=http;AccountName=azuriteuser;AccountKey=UGFzc3dvcmQxMjMhfg==;BlobEndpoint=http://localhost:10000/azuriteuser;

    vmtestqueue.local:
        build:
            context: ./vm-test-queue
        networks:
            - sharednet
        environment:
            SUBMISSION_QUEUE_NAME: test-input
            VM_TEST_SERVER: vmtestserver.local:80
            RABBIT_MQ: rabbitmq.local
        restart: always

    vmtestserver.local:
        build:
            context: ./vm-test-server
        networks:
            - sharednet
        ports:
            - 8084:80
        environment:
            RESULTS_BLOB_CONN_STR: DefaultEndpointsProtocol=http;AccountName=azuriteuser;AccountKey=UGFzc3dvcmQxMjMhfg==;BlobEndpoint=http://azurite.local:10000/azuriteuser;
            RESULTS_QUEUE_NAME: test-output
            HTTP_LISTEN_PORT: 80
            VM_TEST_ADDR: "host.docker.internal:10009"
            RABBIT_MQ: rabbitmq.local
        restart: always

    rabbitmq.local:
        image: rabbitmq:3-management-alpine
        container_name: 'rabbitmq'
        ports:
            - 5672:5672
            - 15672:15672
        networks:
            - sharednet
        restart: always

networks:
    sharednet: {}
volumes:
    azurite_data: {}
