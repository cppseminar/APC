<!--
    IMPORTANT:
    - Policy elements can appear only within the <inbound>, <outbound>, <backend> section elements.
    - To apply a policy to the incoming request (before it is forwarded to the backend service), place a corresponding policy element within the <inbound> section element.
    - To apply a policy to the outgoing response (before it is sent back to the caller), place a corresponding policy element within the <outbound> section element.
    - To add a policy, place the cursor at the desired insertion point and select a policy from the sidebar.
    - To remove a policy, delete the corresponding policy statement from the policy document.
    - Position the <base> element within a section element to inherit all policies from the corresponding section element in the enclosing scope.
    - Remove the <base> element to prevent inheriting policies from the corresponding section element in the enclosing scope.
    - Policies are applied in the order of their appearance, from the top down.
    - Comments within policy elements are not supported and may disappear. Place your comments between policy elements or at a higher level scope.
-->
<policies>
    <inbound>
        <base />
        <rate-limit calls="250" renewal-period="60" />
        <cors>
            <allowed-origins>
                <origin>*</origin>
            </allowed-origins>
            <allowed-methods>
                <method>GET</method>
                <method>POST</method>
                <method>PUT</method>
            </allowed-methods>
            <allowed-headers>
                <header>Authorization</header>
                <header>Content-type</header>
            </allowed-headers>
        </cors>
        <check-header name="Authorization" failed-check-httpcode="403" failed-check-error-message="Missing authorization token" ignore-case="false" />
        <validate-jwt header-name="Authorization" failed-validation-httpcode="401" failed-validation-error-message="Authentication failed" require-expiration-time="true" require-scheme="Bearer" require-signed-tokens="true" clock-skew="10" output-token-variable-name="validated-jwt">
            <openid-config url="https://accounts.google.com/.well-known/openid-configuration" />
            <audiences>
                <audience>
                    <!-- Your id -->
                </audience>
            </audiences>
            <issuers>
                <issuer>accounts.google.com</issuer>
            </issuers>
            <required-claims>
                <claim name="email" match="all" />
                <claim name="email_verified" match="all">
                    <value>true</value>
                </claim>
                <claim name="name" match="all" />
                <claim name="picture" match="all" />
                <claim name="exp" match="all" />
            </required-claims>
        </validate-jwt>
        <set-variable name="email" value="@(((Jwt)context.Variables["validated-jwt"]).Claims["email"][0])" />
        <set-header name="x-request-email" exists-action="override">
            <value>@((System.String)context.Variables["email"])</value>
        </set-header>
        <set-header name="x-functions-key" exists-action="override">
            <value>
                <!-- Your id -->
            </value>
        </set-header>
    </inbound>
    <backend>
        <base />
    </backend>
    <outbound>
        <base />
    </outbound>
    <on-error>
        <base />
    </on-error>
</policies>
