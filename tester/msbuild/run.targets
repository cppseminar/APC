<!--
 * @file run.targets
 * @author created by: Tomas Benna
-->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" DefaultTargets="Build">

  <PropertyGroup>
    <WorkDir>$(MSBuildThisFileDirectory)work\</WorkDir>
    <ProjectDataFiles>$(MSBuildThisFileDirectory)project\main.vcxproj</ProjectDataFiles>
    <ProjectPath>$(WorkDir)main.vcxproj</ProjectPath>
    <Configurations>Debug;Release</Configurations>
    <Platforms>Win32;x64</Platforms>
    <CompilationTarget>Rebuild</CompilationTarget>
  </PropertyGroup>
  
  <!-- INPUT PARAMETERS
  BinaryTargetDir - output of this compilations, warnings, errors
  SourceFiles - list of source files to compile
  -->


  <Target Name="Build">
    <Error Condition="'$(BinaryTargetDir)'==''" Error="BinaryTargetDir is empty" />
    <Error Condition="'$(SourceFiles)'==''" Error="SourceFiles is empty" />

    <RemoveDir Directories="$(WorkDir)" />
    <MakeDir Directories="$(WorkDir)" />
    <Copy SourceFiles="$(ProjectDataFiles)" DestinationFolder="$(WorkDir)" />
    
    <ItemGroup>
      <Platform Include="$(Platforms)" />
      <PlatformExecution Include="$(MSBuildThisFileFullPath)">
        <Properties>
          Platform=%(Platform.Identity);
          Configurations=$(Configurations);
          CompilationTarget=$(CompilationTarget);
          SourceFiles=$(SourceFiles)
        </Properties>
      </PlatformExecution>
    </ItemGroup>
    <MSBuild Targets="CompilePlatforms" Projects="@(PlatformExecution)" BuildInParallel="true" />
  </Target>

  <Target Name="CompilePlatforms">
    <ItemGroup>
      <Configuration Include="$(Configurations)" />
    </ItemGroup>
    <ItemGroup>
      <ConfigurationExecution Include="$(MSBuildThisFileFullPath)">
        <Properties>
          ItemsMaskToInclude=$(SourceFiles);
          Configuration=%(Configuration.Identity);
          Platform=$(Platform);
          CompilationTarget=$(CompilationTarget);
        </Properties>
      </ConfigurationExecution>
    </ItemGroup>

    <MSBuild Projects="@(ConfigurationExecution)" Targets="CompileAndCopyOne" BuildInParallel="true" />
  </Target>

  <Target Name="CompileAndCopyOne">
    <PropertyGroup>
      <ExecProps>ItemsMaskToInclude=$(SourceFiles);Configuration=$(Configuration);Platform=$(Platform)</ExecProps>
    </PropertyGroup>

    <MSBuild Projects="$(ProjectPath)" BuildInParallel="true" Targets="GetNativeTargetPath">
      <Output TaskParameter="TargetOutputs" PropertyName="_BinOut" />
    </MSBuild>

    <PropertyGroup>
      <TargetOutDir>$([System.IO.Path]::GetDirectoryName('$(_BinOut)'))</TargetOutDir>
      <ResultOutDir>$(BinaryTargetDir)\$(Configuration)_$(Platform)</ResultOutDir>
    </PropertyGroup>

    <!-- need to execute it as exec (ignore errors) -->
    <Exec Command='msbuild.exe "$(ProjectPath)" /p:Configuration=$(Configuration) /p:Platform=$(Platform) /p:ItemsMaskToInclude="$(SourceFiles)" /bl:"$(TargetOutDir)\msbuild.binlog" /flp2:LogFile="$(TargetOutDir)\errors.log";ErrorsOnly /flp3:LogFile="$(TargetOutDir)\warnings.log";WarningsOnly' ContinueOnError='true' IgnoreStandardErrorWarningFormat='true' />
    <ItemGroup>
      
      <!-- IF YOU NEED COPY OF .LOG files, uncomment this
      <FilesMask Include="main.exe;msbuild.binlog;errors.log;warnings.log" />
      -->
      <FilesMask Include="main.exe;msbuild.binlog" />
      <FilesToCopy Include="$(TargetOutDir)\%(FilesMask.Identity)" Condition="Exists('$(TargetOutDir)\%(Identity)')" />
      
      <LogMask Include="errors.log;warnings.log" />
      <LogToConvert Include="$(TargetOutDir)\%(LogMask.Identity)" Condition="Exists('$(TargetOutDir)\%(Identity)')">
        <LogType>%(FileName)</LogType>
      </LogToConvert>
    </ItemGroup>
    <Copy SourceFiles="@(FilesToCopy)" DestinationFolder="$(ResultOutDir)" />

    <ConvertLogToXml LogType="%(LogToConvert.LogType)" LogFile="%(Identity)" OutXmlFile="$(ResultOutDir)\%(LogType).xml" />
  </Target>

  
  <!--
  out format:
  <Warning File="c:\git1\ba-incubator\test\test1\main.cpp" Line="8,6" Code="C4101" Text="'xxx': unreferenced local variable" Project="c:\git1\ba-incubator\testBuilder\work\main.vcxproj" />
  -->
  <UsingTask TaskName="ConvertLogToXml" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.Core.dll" >
    <ParameterGroup>
      <LogFile ParameterType="System.String" />
      <OutXmlFile ParameterType="System.String" />
      <LogType ParameterType="System.String" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Xml"/>
      <Using Namespace="System.IO"/>
      <Using Namespace="System.Xml"/>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
          XmlDocument doc = new XmlDocument();
          doc.LoadXml("<" + LogType + " />");

          string type = LogType.ToLower();
          string searchType = (type == "errors") ? "error" : ((type == "warnings") ? "warning" : string.Empty);
          if( string.IsNullOrEmpty(searchType) )
            throw new Exception("Unsupported log type (warning or error)");

          char[] toTrim = { ' ', '\t', '(', ')', '[', ']', ':' };
          string[] lines = File.ReadAllLines(LogFile);
          foreach(var it in lines)
          {
            string line = it.Trim();
            if (string.IsNullOrEmpty(line))
              continue;
            int pos1 = line.IndexOf(": " + searchType);
            string file = line.Substring(0, pos1);
            string fileLine = string.Empty;
            int pos2 = file.LastIndexOf("(");
            if( pos2 >= 0)
            {
              fileLine = file.Substring(pos2).Trim(toTrim);
              file = file.Substring(0, pos2);
            }
            pos2 = line.IndexOf(": ", pos1 + 1);
            string code = line.Substring(pos1 + 2 + searchType.Length, pos2 - (pos1 + 1 + searchType.Length) - 1).Trim();

            string text = line.Substring(pos2 + 1).Trim();
            pos2 = text.LastIndexOf("[");
            string project = string.Empty;
            if ( pos2 >= 0)
            {
              project = text.Substring(pos2).Trim(toTrim);
              text = text.Substring(0, pos2).Trim();
            }

            XmlElement e = doc.CreateElement(searchType);
            e.SetAttribute("file", file);
            e.SetAttribute("line", fileLine);
            e.SetAttribute("code", code);
            e.SetAttribute("text", text);
            e.SetAttribute("project", project);
            doc.DocumentElement.AppendChild(e);
          }
          doc.Save(OutXmlFile);
          return !Log.HasLoggedErrors;
        ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>
