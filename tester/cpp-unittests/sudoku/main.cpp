#define CATCH_CONFIG_MAIN
#define CATCH_CONFIG_ENABLE_BENCHMARKING
#include "../support/catch.hpp"
#include "../support/support-wrap.hpp"

#include <string>
#include <cstdlib>

using namespace std::chrono_literals;
using namespace std::literals::string_literals;

TEST_CASE( "Sudoku", "[basic]" ) {
    const char* submission = std::getenv("SUBMISSIONPATH");
    if (submission == NULL) {
        submission = "./submission";
    }

    SECTION("Simple cin cout") {
        Process p(submission, {});

        p.SendLine("016400000200009000400000062070230100100000003003087040960000005000800007000006820");
        REQUIRE( p.ReadLine(30s).value_or("") == "316452978285679314497318562879234156142965783653187249968721435521843697734596821" );
        p.CloseStdIn();

        REQUIRE(p.Wait(2s) == 0);
    }

    SECTION("In file, out console") {
        auto path = CreateTempFile({
            "....4.....9..6.....8....29....4...2...4.83.....1..2..58.5.2...6...6......46915..."s,
            "000093006000800900020006100000080053006000200370050000002500040001009000700130000"s
        });
        
        Process p(submission, {"-i", path.c_str()});

        REQUIRE( p.ReadLine(30s).value_or("") == "152849637493267518687531294978456123524183769361792845815324976239678451746915382" );
        REQUIRE( p.ReadLine(30s).value_or("") == "185293476647815932923746185219684753456371298378952614892567341531429867764138529" );

        REQUIRE(p.Wait(2s) == 0);
    }

    SECTION("In console, out file") {
        auto outpath = CreateTempFile();

        Process p(submission, {"-o", outpath.c_str()});

        REQUIRE(p.SendLine("....4.....9..6.....8....29....4...2...4.83.....1..2..58.5.2...6...6......46915..."));
        p.CloseStdIn();

        REQUIRE(p.Wait(30s) == 0);

        std::vector<std::string> output = ReadLinesFromFile(outpath);

        std::vector<std::string> expected = {
            "152849637493267518687531294978456123524183769361792845815324976239678451746915382"s,
        };

        REQUIRE_THAT(output, Catch::Matchers::Equals(expected));
    }
    
    SECTION("In file, out file") {
        auto inpath = CreateTempFile({
            "016400000200009000400000062070230100100000003003087040960000005000800007000006820"s,
            "049008605003007000000000030000400800060815020001009000010000000000600400804500390"s,
            "760500000000060008000000403200400800080000030005001007809000000600010000000003041"s,
            "316452978285679314497318562879234156142965783653187249968721495521843697734596821"s,
            "000605000003020800045090270500000001062000540400000007098060450006040700000203000"s,
            "409000705000010000006207800200000009003704200800000004002801500000060000905000406"s,
            "000010030040070501002008006680000003000302000300000045200500800801040020090020000"s,
            "316452978285679314497318562879234156142965783653187249968721435521843697734596821"s,
            "080070030260050018000000400000602000390010086000709000004000800810040052050090070"s,
            "000093006000800900020006100000080053006000200370050000002500040001009000700130000"s,
        });

        auto outpath = CreateTempFile();

        Process p(submission, {"-i", inpath.c_str(), "-o", outpath.c_str()});
        REQUIRE(p.Wait(30s) == 0);

        std::vector<std::string> output = ReadLinesFromFile(outpath);

        std::vector<std::string> expected = {
            "316452978285679314497318562879234156142965783653187249968721435521843697734596821"s,
            "149238675623957148758146239935472861467815923281369754316794582592683417874521396"s,
            "763548129421369758958172463297436815186795234345821697819254376634917582572683941"s,
            ""s,
            "829675314673124895145398276587436921962817543431952687398761452216549738754283169"s,
            "419638725728519643536247891254186379193754268867923154642891537371465982985372416"s,
            "768915432943276581512438796685194273174352968329687145237569814851743629496821357"s,
            "316452978285679314497318562879234156142965783653187249968721435521843697734596821"s,
            "481976235267453918935821467178632549392514786546789321724165893819347652653298174"s,
            "185293476647815932923746185219684753456371298378952614892567341531429867764138529"s,
        };

        REQUIRE_THAT(output, Catch::Matchers::Equals(expected));
    }

    SECTION("Out file, in file") {
        auto inpath = CreateTempFile({
            "016400000200009000400000062070230100100000003003087040960000005000800007000006820"s,
        });

        auto outpath = CreateTempFile();

        Process p(submission, {"-o", outpath.c_str(), "-i", inpath.c_str()});
        REQUIRE(p.Wait(10s) == 0);

        std::vector<std::string> output = ReadLinesFromFile(outpath);

        std::vector<std::string> expected = {
            "316452978285679314497318562879234156142965783653187249968721435521843697734596821"s,
        };

        REQUIRE_THAT(output, Catch::Matchers::Equals(expected));
    }

    SECTION("Invalid input cin cout") {
        Process p(submission, {});

        p.SendLine("01640000020000900040invalid070230100100000003003087040960000005000800007000006820");
        p.CloseStdIn();

        REQUIRE(p.Wait(2s) != 0);
    }

    SECTION("Failure -i") {
        Process p(submission, {"-i"});
        REQUIRE(p.Wait(2s) != 0);
    }

    SECTION("Failure -o") {
        Process p(submission, {"-o"});
        REQUIRE(p.Wait(2s) != 0);
    }

    SECTION("Failure more params") {
        auto inpath = CreateTempFile();

        auto outpath = CreateTempFile();

        Process p(submission, {"-i", inpath.c_str(), "-o", outpath.c_str(), "kkkk"});
        REQUIRE(p.Wait(2s) != 0);
    }

    SECTION("Failure even more params") {
        auto inpath = CreateTempFile();

        auto outpath = CreateTempFile();

        Process p(submission, {"-i", inpath.c_str(), "-o", outpath.c_str(), "kkkk", "adada", "deeee"});
        REQUIRE(p.Wait(2s) != 0);
    }

    SECTION("Out file ro, in file") {
        auto inpath = CreateTempFile({
            "016400000200009000400000062070230100100000003003087040960000005000800007000006820"s,
        });

        auto outpath = CreateTempFile(TmpFileMode::Ro);

        Process p(submission, {"-o", outpath.c_str(), "-i", inpath.c_str()});
        REQUIRE(p.Wait(30s) != 0);
    }

    SECTION("Out file, in file wo") {
        auto inpath = CreateTempFile({
            "016400000200009000400000062070230100100000003003087040960000005000800007000006820"s,
        }, TmpFileMode::Wo);

        auto outpath = CreateTempFile();

        Process p(submission, {"-o", outpath.c_str(), "-i", inpath.c_str()});
        REQUIRE(p.Wait(30s) != 0);
    }

    SECTION("Out file, in file missing") {
        auto inpath = CreateTempFile();
        RemoveFile(inpath);

        auto outpath = CreateTempFile();

        Process p(submission, {"-o", outpath.c_str(), "-i", inpath.c_str()});
        REQUIRE(p.Wait(30s) != 0);
    }

}

TEST_CASE( "Sudoku bonus #1", "[bonus1]" ) {
    const char* submission = std::getenv("SUBMISSIONPATH");
    if (submission == NULL) {
        submission = "./submission";
    }

    SECTION("Internet example") {
        auto inpath = CreateTempFile({
            "2 679 6789 1 46789 5 469 9 3"s,
            "389 5 4 69 689 68 7 1 29"s,
            "9 1 679 2 4679 3 4569 8 59"s,
            "6 9 2 8 u1 7 3 59 4"s,
            "3489 3479 3789 56 2456 46 u1 2579 2579"s,
            "1 47 5 3 24 9 8 27 6"s,
            "3459 2 39 7 3589 1 59 6 589"s,
            "359 8 1 569 3569 6 2 4 579"s,
            "7 369 369 4 35689 2 59 359 1"s,
        });

        Process p(submission, {"--check", inpath.c_str()});
        REQUIRE(p.ReadLine(30s).value_or("") == "YES");

        REQUIRE(p.Wait(2s) == 0);
    }
}

TEST_CASE( "Sudoku bonus #2", "[bonus2][release]" ) {
    const char* submission = std::getenv("SUBMISSIONPATH");
    if (submission == NULL) {
        submission = "./submission";
    }

    SECTION("100 very hard") {
        auto inpath = CreateTempFile({
            "004100300070008001000000709803059002009601500100820904601000000400300090008004200"s,
            "600200004208451600300080010100860300009000100006013008010070002002148503500002001"s,
            "009546080008000507250000000040630008000108000500024010000000026805000300030289700"s,
            "010760900007003020680020000020805009805000201900201040000080092040900700009042080"s,
            "940107008000003500060480010500870300070000060008049007050034080007500000300708095"s,
            "200301045000006002053090000980000703107000409305000086000020960400100000790605004"s,
            "003000100680013000910400030260051703001000200809670015020009084000280071008000600"s,
            "900300006080000007005208900008004073090000040760100200007801400100000050800009001"s,
            "846100030050002100000940000615000040003000600080000712000028000002300060030001427"s,
            "009108040040605708000000010800300070105702409090001002060000000903804020050206100"s,
            "014060300620004009080050600060200003070010050500009060006020030100500092007090410"s,
            "800103050310400800005000000090200005058709360400005080000000200002001037030802001"s,
            "604120000020005000701360040906000400800204006002000708090013504000700030000092107"s,
            "080007095320085000750360000006000403003000900502000700000013084000740039430500060"s,
            "000060030096005004000701060010003095049010720730500010060907000400800950020050000"s,
            "600008030030600590400005801004003079900000005310500600103800006049006080060900003"s,
            "200801050000090700005002008690004520042000380058200046500100800007020000010903004"s,
            "000008002208300100073010800000001345000935000531700000009060270006007409700200000"s,
            "080002700503700400067050003690074005005000100200910074300020860002006507006500030"s,
            "000005070200309501150020009008063052360000018420150600500030026801206005090500000"s,
            "012000006300026150605910000250000700736000491004000025000094208028570004400000530"s,
            "012500000030980010900310000400056001070000040600430009000048003050073020000005670"s,
            "700010500109800400030059000900567004007000600600184007000340060006008105001020009"s,
            "000024008040000050602590000520840067406070105970065042000083501090000020700210000"s,
            "020509800905000003710004095600800320000030000034001007170900038800000709009708060"s,
            "280090005059120400003000000100670000600405009000082001000000200002061390300040067"s,
            "600074031000800040074630800307000000406000703000000204003098570090006000860750009"s,
            "601002040008000900090080070100706050067305190050208007030070010004000700010600504"s,
            "806000003030004000070308062000003890420605031083900000190402050000500010300000207"s,
            "000004000310900500029000178000250006900608005600039000164000830007006059000400000"s,
            "800460100300700000041080020003600400520000061006008300080030510000009007004017008"s,
            "100900000200003908005070000052016789000000000791280360000050800806100002000007001"s,
            "010006090200790000704002030501960002000305000300071905070800403000017009050600020"s,
            "002090040601004900030100002409018050010040080060530401100005020003800504040020700"s,
            "080025000500100800102380090900400030803201904010003007030014609001002008000650010"s,
            "703000000058030200020080059400501630500040008036802005390050060005060190000000504"s,
            "640090087800050200070000000400960801900741005107085002000000020006030008780020054"s,
            "203000400740000592090050300000081030800605007020740000007010060162000053009000701"s,
            "700100340009308200000094700050000400207060803003000010004710000001602500062005007"s,
            "400007590000060031080090002730001200090000010004700053200070080860030000071200005"s,
            "002074008010200700700006104085090007000000000200050610306500002007009050500320900"s,
            "002310870600000040073050009309000060000508000020000907200070130030000002048031700"s,
            "059006708000500060000100540010600300002070900004002050061003000040001000905200170"s,
            "901800036560003200200900000430090820009000100012040093000009008005100072320006901"s,
            "203047100706801004100200000408070002070106080900080705000004001600708203007310906"s,
            "209005001605002007041090020000000009002864300500000000010020650900100702800500904"s,
            "900400003300085000070301080800007546000050000745100009060708090000640007200003008"s,
            "500001600300050079080000003070580900200106007005029010900000060810030004003400001"s,
            "900004100045910600106350009060001970091000520027400010600079401004036790009100003"s,
            "106400007000019300020000084000004951000305000795100000670000010009620000300001605"s,
            "100640070003070612760003005087500000400030007000007290800700069679080500050096001"s,
            "405007180006010000001000920300060010092805460060090002043000700000050200019400608"s,
            "000002000108050047070890005709008054016000890850900701900085070640030502000400000"s,
            "000008700000009160760010000000050370476000528035020000000090085098600000004300000"s,
            "906000000200680107030402006100005409000000000609100008300208050508037002000000903"s,
            "000700420020000300070840009010007083307000206250900040700084090002000030085001000"s,
            "090600580000003941001090600320000800060000070004000095003080100916400000058001030"s,
            "000934080390001000000200049003000067870000015610000200730006000000700034050319000"s,
            "000000000604000109307120605000056403001080700406710000703094201205000304000000000"s,
            "206180507000005100030400809702050000100708002000010706605007090009500000407031605"s,
            "006718204001020080000006000500100009080000050600009003000800000040070600705263400"s,
            "010000007243010008006800010080059600004000300002740080030001700600070145700000030"s,
            "907000501508030700010500030000080060801304207020010000080009070006020805203000609"s,
            "080400090271030006900007005032000001000608000700000950400300009300080612020006030"s,
            "200040000600001073900500806431000000860000054000000381302004009180600007000020008"s,
            "200050109640000080089200000008001053003000700170300900000008490090000076704090005"s,
            "090037100825400073010000000030061040001000500040820010000000030450003761003170020"s,
            "307600200000007004600400500903040001010306050400080307005004002200800000009003105"s,
            "000607040020459008450083900004730092000000000780096500009860057100372080070905000"s,
            "000900100540020000021800400070060810080502070059080040003005690000030084005008000"s,
            "702060800000000000045710003070256038254103796380947050500094380000000000008070104"s,
            "700050002015200000630009040009040600000508000004030200070100029000007350500090008"s,
            "600300500049057300508120000000000073305000804710000000000085106004210730001003009"s,
            "008200103700106005020000060010500470005000900067004080070000010500401008301002600"s,
            "800004600060300002100620054000001040506000701030900000610083009300009080007200003"s,
            "005003697090005200060900000014080006009000400700090820000009080001200030943700500"s,
            "000000108080090720005008394091050003002709800800040970279400600064010080508000000"s,
            "400000080015840000030052007000089350093020760052360000500210090000098270080000004"s,
            "000000003040200100000943056100032700204708501007160004980674000006001080500000000"s,
            "200057160090102700000060000060000590009586200025000030000070000007308020036420008"s,
            "010026740007005012420310000000003400740000035003600000000062057950700300072530060"s,
            "000003061100098304003200000310000009275000683600000012000002900906850007750100000"s,
            "320005040604000870081400000400816350008020700063957004000008430046000507030500098"s,
            "009000026006008001020510090005004080600070005040800300030045070500700100760000200"s,
            "004070028000013460000000500080002740205708903076100080007000000063420000920050600"s,
            "980700000506190200002063000020070500790000014008040020000930600009012407000007031"s,
            "419000008006000200200086000300648100080205060002179003000760005008000700700000429"s,
            "700690500059000000600300700000105930900080006012907000004006001000000620006012004"s,
            "600070420008340006000061087105020000080915070000030104260180000800057200037090001"s,
            "005028000209300600000690004760400301050000040104006072300014000006003409000560700"s,
            "645009087100700600000640051200000706070000020309000008520086000007002003980400562"s,
            "007503000005908401890600000408000039903000207670000805000005084509304100000802500"s,
            "480100060030500408005000903370000090008907300090000084803000100709006040040009037"s,
            "069100000400900030010850460003001790000578000071300500036015020020009007000002650"s,
            "407210600800000000060003000008054100041906380006180400000500090000000004002068701"s,
            "450300087007809000012000300500070901000502000703080004005000410000204500240005093"s,
            "400010068020500400600409100000003000037000580000700000002804009009007050750090004"s,
            "900000010508390040030080905700910080000473000090028007206050030070039604040000001"s,
            "000200006300060298000003010006100507500000003708002600040300000692050004800009000"s,
            "000002700017300004200100003040003902030801040702600080900008006300006870006200000"s,
        });

        auto outpath = CreateTempFile();

        Process p(submission, {"-o", outpath, "-i", inpath.c_str()});
        REQUIRE(p.Wait(30s) == 0);

        std::vector<std::string> output = ReadLinesFromFile(outpath);

        std::vector<std::string> expected = {
            "984167325572938641316245789863459172249671538157823964691782453425316897738594216"s,
            "691237854278451639345986217127869345839524176456713928913675482762148593584392761"s,
            "379546182418392567256817439142635978963178245587924613791453826825761394634289751"s,
            "512768934497153628683429517124875369835694271976231845361587492248916753759342186"s,
            "943157628182693574765482913521876349479315862638249157256934781897521436314768295"s,
            "279381645814756392653294871986542713127863459345917286531428967462179538798635124"s,
            "473598126682713549915426837264851793751934268839672415527169384346285971198347652"s,
            "921347586486915327375268914218594673593672148764183295657821439149736852832459761"s,
            "846175239359862174127943586615287943273419658984536712461728395792354861538691427"s,
            "579138246241695738386427915824369571135782469697541382762913854913854627458276193"s,
            "714962385625834179389157624961285743472613958538749261896421537143576892257398416"s,
            "864123759319457826725698413693284175258719364471365982147536298582941637936872541"s,
            "684127395329485671751369842976851423813274956542936718297613584165748239438592167"s,
            "684127395329485671751369842976851423813274956542936718297613584165748239438592167"s,
            "187462539296385174354791268618273495549618723732549816865927341471836952923154687"s,
            "651298734738614592492735861584163279926487315317529648173842956249356187865971423"s,
            "279841653483695712165732498691384527742569381358217946524176839937428165816953274"s,
            "145698732298374156673512894967821345482935617531746928859463271326157489714289563"s,
            "189432756523769418467851923691274385745683192238915674354127869812396547976548231"s,
            "983615274246379581157824369718463952365792418429158637574931826831246795692587143"s,
            "912345876347826159685917342251469783736258491894731625573694218128573964469182537"s,
            "812564397536987412947312865498756231371829546625431789769248153154673928283195674"s,
            "768412593159836472234759816913567284487293651625184937592341768346978125871625349"s,
            "357624918849731256612598734521849367486372195973165842264983571198457623735216489"s,
            "423569871965187243718324695691875324587432916234691587172956438846213759359748162"s,
            "286794135759123486413856972125679843638415729947382651564937218872561394391248567"s,
            "658274931932815647174639852387942165426581793519367284243198576795426318861753429"s,
            "671952843348167925295483671123796458867345192459218367536874219984521736712639584"s,
            "856129473231764589974358162617243895429685731583917624198472356742536918365891247"s,
            "785124963316987542429365178843251796972648315651739284164592837237816459598473621"s,
            "872463159359721846641985723713692485528374961496158372987236514165849237234517698"s,
            "134928657267543918985671243352416789648739125791285364419352876876194532523867491"s,
            "813546297265793841794182536541968372987325164326471985672859413438217659159634728"s,
            "852397146671284935934156872429718653315649287768532491187465329293871564546923718"s,
            "389725146576149823142386795927468531853271964614593287235814679761932458498657312"s,
            "713925486958436271624187359489571632572643918136892745391254867245768193867319524"s,
            "645293187819457263372816549453962871928741635167385492534178926296534718781629354"s,
            "253897416748163592691452378975281634814635927326749185437518269162974853589326741"s,
            "728156349149378265635294781956831472217469853483527916594713628371682594862945137"s,
            "423817596957462831186395472738951264592643718614728953245176389869534127371289645"s,
            "632174598419285763758936124185692437963741285274853619396517842827469351541328976"s,
            "492316875615789243873452619389127564764598321521643987256974138137865492948231756"s,
            "159426738473598261826137549518649327632875914794312856261783495347951682985264173"s,
            "941825736567413289283967415436591827859372164712648593174239658695184372328756941"s,
            "253647198796831524184295637468579312375126489921483765532964871619758243847312956"s,
            "239745861685312497741698523463257189192864375578931246317429658954186732826573914"s,
            "958476123316285974472391685821937546639854712745162839564728391183649257297513468"s,
            "549371628361258479782964153176583942298146537435729816924817365817635294653492781"s,
            "932684157845917632176352849368521974491763528527498316653279481214836795789145263"s,
            "136482597458719326927536184863274951241395768795168432674853219519627843382941675"s,
            "192645378543978612768213945987524136426139857315867294831752469679481523254396781"s,
            "435927186926518374781346925357264819192835467864791532543682791678159243219473658"s,
            "365742918198653247274891365729318654416527893853964721931285476647139582582476139"s,
            "241568739853749162769213854982456371476931528135827946327194685598672413614385297"s,
            "976351824245689137831472596183725469427896315659143278394268751518937642762514983"s,
            "169735428824196375573842619416257983397418256258963147731684592642579831985321764"s,
            "497612583682573941531894627325749816169358472874126395743285169916437258258961734"s,
            "527934186394861752186257349243195867879623415615478293738546921961782534452319678"s,
            "129645837654378129387129645872956413591483762436712958763594281215867394948231576"s,
            "296183547874695123531472869762359418143768952958214736615827394389546271427931685"s,
            "356718294971425386824396571537142869489637152612589743163854927248971635795263418"s,
            "815934267243617958976825413387159624594286371162743589438561792629378145751492836"s,
            "937462581548931726612578934479285163861394257325716498184659372796123845253847619"s,
            "685421397271935846943867125832759461159648273764213958416372589397584612528196734"s,
            "278346195645891273913572846431958762867213954529467381352784619184639527796125438"s,
            "237856149641937582589214637968471253423569718175382964356728491892145376714693825"s,
            "694237158825419673317658294538761942261394587749825316176542839452983761983176425"s,
            "347659218528137964691428573973542681812376459456981327165794832234815796789263145"s,
            "938627145621459738457183926514738692296514873783296514349861257165372489872945361"s,
            "736954128548123967921876453372469815684512379159387246813745692297631584465298731"s,
            "732469815891532647645718923179256438254183796386947251517694382463821579928375164"s,
            "798654132415273896632819547259741683367528914184936275873165429926487351541392768"s,
            "627348591149657382538129467482591673395762814716834925273985146954216738861473259"s,
            "658247193739186245124953867813529476245678931967314582472865319596431728381792654"s,
            "852194637469357812173628954298571346546832791731946528615483279324769185987215463"s,
            "125843697397165248468972315214387956839526471756491823572639184681254739943718562"s,
            "947623158183594726625178394791852463432769815856341972279485631364217589518936247"s,
            "427136589915847623638952417146789352893524761752361948574213896361498275289675134"s,
            "698517423345286179721943856159432768264798531837165294982674315476351982513829647"s,
            "243857169698132754751964382864213597379586241125749836982675413417398625536421978"s,
            "519826743637495812428317596265173489741289635893654271384962157956741328172538964"s,
            "589473261127698354463215798318526479275941683694387512841762935936854127752139846"s,
            "329785146654192873781463925472816359598324761163957284915678432846239517237541698"s,
            "159437826476298531823516794315624987682379415947851362231945678598762143764183259"s,
            "634975128752813469891246537189532746245768913376194285417689352563427891928351674"s,
            "983725146546198273172463895421379568795286314638541729817934652359612487264857931"s,
            "419527638856314297273986541395648172187235964642179853924761385538492716761853429"s,
            "743691582859274163621358749468125937975483216312967458294536871137849625586712394"s,
            "651879423798342516342561987175426398483915672926738154269183745814657239537294861"s,
            "645128937219347658873695124768452391952731846134986572397814265586273419421569783"s,
            "645139287198725634732648951214853796876914325359267148521386479467592813983471562"s,
            "147523968365978421892641753428157639953486217671239845216795384589364172734812596"s,
            "487193265936572418125468973374281596658947321291635784863724159719356842542819637"s,
            "569143872487926135312857469853261794694578213271394586736415928125689347948732651"s,
            "437219658819675243265843917928354176741926385356187429674531892183792564592468731"s,
            "459321687637849125812657349528473961164592738793186254375968412981234576246715893"s,
            "475312968921568473683479125596183247237946581814725396362854719149637852758291634"s,
            "927645318518397246634281975752916483861473592493528167286154739175839624349762851"s,
            "489215376351467298267983415926134587514876923738592641145328769692751834873649152"s,
            "563942718817365294294187653148753962639821547752694381971538426325416879486279135"s,
        };

        REQUIRE_THAT(output, Catch::Matchers::Equals(expected));
    }
}